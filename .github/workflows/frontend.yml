# name: Frontend CI/CD

# on:
#   push:
#     branches:
#       - main
#       - development
#     paths:
#       - 'frontend/**'
#   pull_request:
#     branches:
#       - main
#       - development
#     paths:
#       - 'frontend/**'

# jobs:
#   build-and-test:
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: ./frontend

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'
#           cache: 'npm'
#           cache-dependency-path: './frontend/package-lock.json'

#       - name: Install dependencies
#         run: npm ci

#       - name: Run linting
#         run: npm run lint

#       - name: Build frontend
#         run: npm run build

#       - name: Upload build artifacts
#         uses: actions/upload-artifact@v3
#         with:
#           name: frontend-build
#           path: frontend/dist/

#   docker-build-push:
#     needs: build-and-test
#     if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development')
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Login to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Set Docker tag
#         id: set-tag
#         run: |
#           if [ "${{ github.ref }}" = "refs/heads/main" ]; then
#             echo "TAG=latest" >> $GITHUB_OUTPUT
#           else
#             echo "TAG=dev" >> $GITHUB_OUTPUT
#           fi

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v4
#         with:
#           context: ./frontend
#           push: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/skincare-frontend:${{ steps.set-tag.outputs.TAG }}
#           cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/skincare-frontend:buildcache
#           cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/skincare-frontend:buildcache,mode=max

#   deploy:
#     needs: docker-build-push
#     if: github.ref == 'refs/heads/main'
#     runs-on: ubuntu-latest

#     steps:
#       - name: Deploy to production server
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.DEPLOY_HOST }}
#           username: ${{ secrets.DEPLOY_USERNAME }}
#           key: ${{ secrets.DEPLOY_KEY }}
#           script: |
#             cd /opt/skincare
#             docker-compose pull frontend
#             docker-compose up -d frontend